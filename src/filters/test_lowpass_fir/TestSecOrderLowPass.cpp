
#include <math.h>

#include "filter/SecOrderLowPass.hpp"
#include "gtest/gtest.h"

namespace {

TEST(SecOrderLowPass, DefaultConstructorFloat)
{
    am2b::SecOrderLowPass<float> filter(0);
}

TEST(SecOrderLowPass, InitFilter)
{

    am2b::SecOrderLowPass<float> filter(0);
    filter.init(0.001, 0.1, 1.0);

    EXPECT_FLOAT_EQ(filter.getOutput(), 0.0);
    EXPECT_FLOAT_EQ(filter.getDerivative(), 0.0);
}

TEST(SecOrderLowPass, FilterStepResponse)
{

    am2b::SecOrderLowPass<float> filter(0);
    filter.init(0.01, 0.1, 1.0);

    // Expected step response calculated with matlab using tustin-transformation of
    // continuous second order filter with T = 0.1, dt = 0.01, d = 1
    const double expected[101]{ 0.0022675736961451243, 0.010905949681459883, 0.026948647939901579,
        0.048906968755180143, 0.075508614876030111, 0.10566997494433558, 0.13847172343612907,
        0.17313735679620376, 0.20901432780709298, 0.24555747797421909, 0.28231450132668084,
        0.31891320297051751, 0.35505034238444716, 0.39048187517104765, 0.4250144280855116,
        0.45849786094215428, 0.49081878569834336, 0.5218949278620415, 0.55167022856418857,
        0.580110597360602, 0.60720023624056318, 0.63293846456415437, 0.65733698285567321,
        0.68041752066024375, 0.70220982012693078, 0.7227499127050856, 0.74207865141232709,
        0.76024046562471914, 0.77728230931672526, 0.793252777197785, 0.80820136630497641,
        0.82217786336274556, 0.83523184065164291, 0.84741224527451231, 0.85876706860276131,
        0.86934308435579266, 0.87918564523883391, 0.88833852936088042, 0.89684382879538227,
        0.90474187364951753, 0.91207118588930158, 0.91886845794146677, 0.92516855177154778,
        0.93100451473203094, 0.93640760899463027, 0.94140735183549151, 0.94603156443913994,
        0.95030642723315473, 0.95425654006695693, 0.95790498581011974, 0.96127339617302532,
        0.96438201874970741, 0.96724978445307119, 0.96989437465965178, 0.97233228750758138,
        0.97457890290003546, 0.976648545859391, 0.97855454795664665, 0.98030930660808135,
        0.98192434208820734, 0.98341035215617256, 0.98477726423306766, 0.98603428510115576,
        0.98718994812377525, 0.98825215800738186, 0.989228233145596, 0.99012494559982045,
        0.99094855878253185, 0.99170486291819782, 0.9923992083633284, 0.99303653687180637,
        0.99362141089464839, 0.99415804100500527, 0.99465031153974193, 0.99510180454854236,
        0.99551582214034, 0.995895407315119, 0.99624336336689867, 0.9965622719411048,
        0.9968545098266467, 0.99712226455992126, 0.997367548914734, 0.99759221434881218,
        0.99779796347422478, 0.99798636161566934, 0.99815884751725392, 0.99831674325512931,
        0.99846126341012353, 0.99859352355142161, 0.99871454807931925, 0.998825277472185,
        0.99892657497997583, 0.99901923280399518, 0.99910397780003835, 0.999181476739656,
        0.99925234116197659, 0.99931713184635262, 0.99937636293404941, 0.99943050572525649,
        0.99947999217587946, 0.99952521811685757 };

    // small errors might sum up
    double allowableErrorStep = 3e-07;
    double allowableError = 2.0e-09;
    double overallError = 0.0;

    for (int i = 0; i < 101; i++) {

        filter.process(1.0);

        EXPECT_NEAR(filter.getOutput(), expected[i], allowableError);
        allowableError += allowableErrorStep;
        overallError += fabs(filter.getOutput() - expected[i]);
    }

    overallError /= 101;
    EXPECT_LE(overallError, 1.0e-05);
}

TEST(SecOrderLowPass, FilterStepResponseNoDamping)
{

    am2b::SecOrderLowPass<float> filter(0);
    filter.init(0.01, 0.1, 0.0);

    // Expected step response calculated with matlab using tustin-transformation of
    // continuous second order filter with T = 0.1, dt = 0.01, d = 0
    const double expected[101]{ 0.0024937655860349122, 0.012443952462982192, 0.032245072482443363,
        0.061699608237740504, 0.10051374889839686, 0.14830032099148815, 0.20458265048117311,
        0.26879931762191872, 0.34030975715546313, 0.41840064798920246, 0.50229302861856084,
        0.59115006731656206, 0.684085409582478, 0.78017201958323223, 0.87845142739363025,
        0.97794328979361811, 1.0776551692530214, 1.1765924335577811, 1.2737681773282987,
        1.3682130664621255, 1.4589850073020658, 1.545178544079143, 1.6259338908903436,
        1.7004455081166032, 1.7679701377307273, 1.82783421734255, 1.8794405990257688,
        1.9222745059057385, 1.9559086670908878, 1.9800075797265024, 1.9943308556566159,
        1.9987356193108532, 1.9931779328971517, 1.9777132346839776, 1.9524957860001404,
        1.9177771324684216, 1.8739035948223046, 1.8213128143350676, 1.7605293873207977,
        1.6921596322534525, 1.6168855417022825, 1.535457979413434, 1.4486891903972694,
        1.3574446987337505, 1.2626346739157803, 1.1652048518517675, 1.066127101090979,
        0.96638972837417114, 0.86698762021223463, 0.76891231883122357, 0.67314213147683388,
        0.58063237173863547, 0.49230583023745828, 0.4090435697314187, 0.33167613645997845,
        0.26097527539342619, 0.1976462320286852, 0.14232071752151348, 0.095550607328341683,
        0.057802436214188936, 0.029452744539296159, 0.01078432224555754, 0.0019833880092198445,
        0.003137731697977212, 0.014235838661567723, 0.035167004591127628,
        0.065722439801574051, 0.10559735192173046, 0.15439398621723122, 0.21162559321879451,
        0.27672128407852442, 0.34903172522176035, 0.42783561548996624, 0.51234688116475613,
        0.60172251710224189, 0.6950709957618999, 0.79146116024936952, 0.8899315126645263,
        0.98949980510297963, 1.0891728376401564, 1.187956365562469, 1.2848650170203184,
        1.3789321221737261, 1.4692193557842539, 1.5548260970677568, 1.6348984134428535,
        1.7086375785616625, 1.7753080396549192, 1.8342447547167056, 1.8848598263399214,
        1.9266483660295721, 1.9591935304969827, 1.9821706796975906, 1.9953506151356293,
        1.9986018661334124, 1.9918920012595409, 1.9752879518344524, 1.9489553442863272,
        1.9131568480171417, 1.8682495552590073, 1.814681419056893 };

    // small errors might sum up
    double allowableErrorStep = 1e-06;
    double allowableError = 1.0e-08;
    double overallError = 0.0;

    for (int i = 0; i < 101; i++) {

        filter.process(1.0);

        EXPECT_NEAR(filter.getOutput(), expected[i], allowableError);
        allowableError += allowableErrorStep;
        overallError += fabs(filter.getOutput() - expected[i]);
    }

    overallError /= 101;

    EXPECT_LE(overallError, 2.0e-05);
}

TEST(SecOrderLowPass, FilterSecondDerivative)
{

    am2b::SecOrderLowPass<float> filter(0);
    filter.init(0.01, 0.1, 0.0);

    // Expected second derivative of step response calculated with matlab using tustin-transformation of
    // continuous second order filter with T = 0.1, dt = 0.01, d = 0
    const double expected[99]{ 98.5093314251389, 96.5341573583597, 93.596049053592111, 89.72431432434945,
        84.957573965936533, 79.343376510606632, 72.937723927987975, 65.804513001949118,
        58.014897956190637, 49.646580686428244, 40.783035679147204, 31.512677348383143,
        21.927978096437649, 12.124545895898509, 2.2001705941543381, -7.7461515464360975,
        -17.615205342420559, -27.308546366908715, -36.729482938864244, -45.784040628631395,
        -54.381899658766386, -62.437295849409047, -69.869876121355645, -76.6055000230148,
        -82.57697928603757, -87.724748032491632, -91.997456948202938, -95.35248549534802,
        -97.756367055010784, -99.18512275876256, -99.624500679387211, -99.0701179947262,
        -97.527504706631518, -95.012048478815274, -91.548841143982429, -87.172428411199647,
        -81.926465270329984, -75.863280530752419, -69.04335483824741, -61.534717376785508,
        -53.41226727316073, -44.757026473543071, -35.655331544512947, -26.197972460426655,
        -16.479286967756579, -6.5962195601931839, 3.3526455487131734, 13.268067809254491,
        23.051140266213686, 32.60427616191275, 41.832182370212244, 50.642809951376151,
        58.94827234599331, 66.665722048879772, 73.718177018112783, 80.035288575692746,
        85.554043139999109, 90.219390790190545, 93.9847943925997, 96.812693811541564,
        98.674880574009251, 99.552779250950621, 99.437632748331438, 98.330589659693914,
        96.2426928088652, 93.194769097099879, 89.217221753443425, 84.3497270606254,
        78.640838581666145, 72.147502835060166, 64.934491249699633, 57.073754065840028,
        48.643702626958714, 39.728427221722427, 30.416858278116131, 20.801879276871603,
        10.979400232965508, 1.0474009872341039, -8.89504614864145, -18.7487646446316,
        -28.415463044417777, -37.798715428798424, -46.804923270249432, -55.344249084061659,
        -63.331512562876391, -70.68704025552374, -77.337460314703677, -83.216434385704474,
        -88.265319335651952, -92.433752222400571, -95.680152668027318, -97.972137625692568,
        -99.28684440255519, -99.611158716546015, -98.941845512170445, -97.285581230366347,
        -94.658887210603552, -91.087964889489115, -86.608434439798813 };

    // small errors might sum up
    double allowableErrorStep = 2e-04;
    double allowableError = 7.0e-05;
    double overallError = 0.0;

    // three steps required until derviative is valid
    filter.process(1.0);
    filter.process(1.0);

    for (int i = 0; i < 99; i++) {

        filter.process(1.0);

        EXPECT_NEAR(filter.getSecondDerivative(), expected[i], allowableError);
        allowableError += allowableErrorStep;
        overallError += fabs(filter.getSecondDerivative() - expected[i]);
    }

    overallError /= 101;

    EXPECT_LE(overallError, 2.0e-03);
}

TEST(SecOrderLowPass, ResetState)
{

    am2b::SecOrderLowPass<float> filter(0);
    filter.init(0.01, 0.1, 1.0);

    filter.process(2.0);
    filter.process(2.0);

    filter.reset(1.0, 0.0);

    // Expected result for digital filter after one step
    EXPECT_FLOAT_EQ(filter.getOutput(), 1.0);
    EXPECT_FLOAT_EQ(filter.getDerivative(), 0.0);
}
} // namespace
